{"version":3,"sources":["serviceWorker.js","index.js","components/App.js","components/Main.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","ipfs","require","ipfsClient","host","port","protocol","props","captureFile","event","preventDefault","file","target","files","reader","FileReader","readAsArrayBuffer","onloadend","setState","buffer","Buffer","result","console","log","state","uploadImage","description","add","error","loading","decentragram","methods","hash","send","from","account","on","images","bind","tipImageOwner","a","this","loadWeb3","loadBlockchainData","ethereum","web3","Web3","enable","currentProvider","alert","eth","getAccounts","accounts","net","getId","networkId","networkData","Decentragram","networks","Contract","abi","address","imageCount","call","imagesCount","i","image","sort","b","tipAmount","id","value","className","Component","Main","role","style","maxWidth","maxHeight","onSubmit","imageDescription","type","accept","onChange","ref","input","placeholder","required","class","map","key","alt","width","height","src","Identicon","author","toString","controls","loop","utils","fromWei","name","onClick","toWei"],"mappings":"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","file":"static/js/main.e263c57d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import Decentragram from '../abis/Decentragram.json'\nimport React, { Component } from 'react';\nimport Main from './Main'\nimport Web3 from 'web3';\nimport './App.css';\n\n//Declare IPFS\nconst ipfsClient = require('ipfs-http-client')\nconst ipfs = ipfsClient({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' }) // leaving out the arguments will default to these values\n\nclass App extends Component {\n\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask! please connect polygon network Mumbai 80001')\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    // Load account\n    const accounts = await web3.eth.getAccounts()\n    this.setState({ account: accounts[0] })\n    // Network ID\n    const networkId = await web3.eth.net.getId()\n    const networkData = Decentragram.networks[networkId]\n    if(networkData) {\n      const decentragram = new web3.eth.Contract(Decentragram.abi, networkData.address)\n      this.setState({ decentragram })\n      const imagesCount = await decentragram.methods.imageCount().call()\n      this.setState({ imagesCount })\n      // Load images\n      for (var i = 1; i <= imagesCount; i++) {\n        const image = await decentragram.methods.images(i).call()\n        this.setState({\n          images: [...this.state.images, image]\n        })\n      }\n      // Sort images. Show highest tipped images first\n      this.setState({\n        images: this.state.images.sort((a,b) => b.tipAmount - a.tipAmount )\n      })\n      this.setState({ loading: false})\n    } else {\n      window.alert('Decentragram contract not deployed to detected network.')\n    }\n  }\n\n  captureFile = event => {\n\n    event.preventDefault()\n    const file = event.target.files[0]\n    const reader = new window.FileReader()\n    reader.readAsArrayBuffer(file)\n\n    reader.onloadend = () => {\n      this.setState({ buffer: Buffer(reader.result) })\n      console.log('buffer', this.state.buffer)\n    }\n  }\n\n  uploadImage = description => {\n    console.log(\"Submitting file to ipfs...\")\n\n    //adding file to the IPFS\n    ipfs.add(this.state.buffer, (error, result) => {\n      console.log('Ipfs result', result)\n      if(error) {\n        console.error(error)\n        return\n      }\n\n      this.setState({ loading: true })\n      this.state.decentragram.methods.uploadImage(result[0].hash, description).send({ from: this.state.account }).on('transactionHash', (hash) => {\n        this.setState({ loading: false })\n      })\n    })\n  }\n\n  tipImageOwner(id, tipAmount) {\n    this.setState({ loading: true })\n    this.state.decentragram.methods.tipImageOwner(id).send({ from: this.state.account, value: tipAmount }).on('transactionHash', (hash) => {\n      this.setState({ loading: false })\n    })\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: '',\n      decentragram: null,\n      images: [],\n      loading: true\n    }\n\n    this.uploadImage = this.uploadImage.bind(this)\n    this.tipImageOwner = this.tipImageOwner.bind(this)\n    this.captureFile = this.captureFile.bind(this)\n  }\n\n  render() {\n    return (\n      <div>\n        \n        { this.state.loading\n          ? <div id=\"loader\" className=\"text-center mt-5\"><p>Loading...</p></div>\n          : <Main\n              images={this.state.images}\n              captureFile={this.captureFile}\n              uploadImage={this.uploadImage}\n              tipImageOwner={this.tipImageOwner}\n            />\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;","import React, { Component } from 'react';\nimport Identicon from 'identicon.js';\n\nclass Main extends Component {\n\n  render() {\n    return (\n      <div className=\"container-fluid mt-5\">\n        <div className=\"row\">\n          <main role=\"main\" className=\"col-lg-12 ml-auto mr-auto\" style={{ maxWidth: '500px' , maxHeight: '700px' }}>\n            <div className=\"content mr-auto ml-auto\">\n              <p>&nbsp;</p>\n              <h2>Share Image</h2>\n              <form onSubmit={(event) => {\n                event.preventDefault()\n                const description = this.imageDescription.value\n                this.props.uploadImage(description)\n              }} >\n                <input type='file' accept=\".MP4, .MOV\" onChange={this.props.captureFile} />\n                  <div className=\"form-group mr-sm-2\">\n                    <br></br>\n                      <input\n                        id=\"imageDescription\"\n                        type=\"text\"\n                        ref={(input) => { this.imageDescription = input }}\n                        className=\"form-control\"\n                        placeholder=\"Image description...\"\n                        required />\n                  </div>\n                <button type=\"submit\" class=\"btn btn-primary btn-block btn-lg\">Upload!</button>\n              </form>\n              <p>&nbsp;</p>\n              { this.props.images.map((image, key) => {\n                return(\n                  <div className=\"card mb-4\" key={key} >\n                    <div className=\"card-header\">\n                      <img\n                      alt=\"Vennverse.com\" \n                        className='mr-2'\n                        width='30'\n                        height='30'\n                        src={`data:image/png;base64,${new Identicon(image.author, 30).toString()}`}\n                      />\n                      <small className=\"text-muted\">{image.author}</small>\n                    </div>\n                    <ul id=\"imageList\" className=\"list-group list-group-flush\">\n                      <li className=\"list-group-item\">\n                        <p class=\"text-center\"><video alt=\"Vennverse.com\" src={`https://ipfs.infura.io/ipfs/${image.hash}`} width=\"320\" height=\"640\"  controls loop /></p>\n                        <p>{image.description}</p>\n                      </li>\n                      <li key={key} className=\"list-group-item py-2\">\n                        <small className=\"float-left mt-1 text-muted\">\n                          TIPS: {window.web3.utils.fromWei(image.tipAmount.toString(), 'Ether')} ETH\n                        </small>\n                        <button\n                          className=\"btn btn-link btn-sm float-right pt-0\"\n                          name={image.id}\n                          onClick={(event) => {\n                            let tipAmount = window.web3.utils.toWei('0.1', 'Ether')\n                            console.log(event.target.name, tipAmount)\n                            this.props.tipImageOwner(event.target.name, tipAmount)\n                          }}\n                        >\n                          TIP 0.1 ETH\n                        </button>\n                      </li>\n                    </ul>\n                  </div>\n                )\n              })}\n            </div>\n          </main>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Main;"],"sourceRoot":""}